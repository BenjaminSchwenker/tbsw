Welcome to test beam data reconstruction and analysis using TBSW



The test beam software framework (TBSW) deals with the reconstruction and analysis of test beam data obtained with the high resolution EUDET/AIDA telescope. The installation of the framework is covered in INSTALL. The material below explains the typical use case.  


1) Introduction: For the impatient reader 


The root directory of TBSW contains a 'workspace' folder. The first step to analyse data from a new beam test is to make a copy of this folder. For example: 

> cp -r workspace ~/workspace-mytb

The idea of the workspace folder is to collect all config files and results obtained from a specific beam test. Next, go to your new workspace folder and setup 
all environment variables. 

> . init_tbsw.sh

A test beam with the EUDET/AIDA telescope results in a number of .raw files stored at some location 'rawfiles'. The conversion of these .raw files into .slcio 
files can be handled using a converter skript. For help on the syntax, just type 

> ./converter.py -h 

Before we can analyse the .slcio files, a few configuration files need to be edited. The most important one is the 'gearfile', an XML file used to define the 
geometry of the beam test telescope. Some example gearfiles can be found in the folder gear-files. In case the geometry was changed during the beam time, more
than one gearfile is needed.

Beside the gearfile(s), we need additional XML steering files for the Marlin processors handling the actual data processing. These steering files should be placed 
in the folder 'steering-files'. The folder contains steering files for the exmaple of X0 imaging, namely the file 'reco-x0-tb.xml' and a group of files in the folder 
'cal-x0-tb'. 

In case of x0 imaging, no new steering files are needed and we can proceed to running the analysis. The first part of the analysis is to run the calibrate.py skript. 
This sript runs a hotpixel killer, performs a pre alignment based on hit correlations and a track based alignment using the Kalman Alignment Algorithm. Use the help option to find out the usage: 

> ./calibrate.py -h 

At the time of writting, the usage would be

> .calibrate.py -i '~/path/to/converted/file*.slcio' -x 'steering-files/cal-x0-tb' -c 'dummy'

The input files can be specified using wildcards. The -c option defined a calibration tag. The default tag is 'dummy'. Calibration tags will be copied to the 
folder 'cal-files'. In case you have multiple geometries (and mulltiple gearfiles), you will probably want to create calibration tags for each of them using a
calibration run.  

TROUBLE SHOOTING: The calibrate.py skript populates the folder tmp-runs/file*.slcio with root files containing DQM histos like correlation bands. It is worthwile 
to have a look at these histos to make sure the calibration was successful.    

After we have a calibration tag, we can run the full reconstruction over one or more complete runs in the same geometry. For this the reco.py skript can be used. 

> ./reco.py -h 

For our x0 imaging example, the usage would be 

> ./reco.py -i '~/path/to/converted/file*.slcio' -x 'steering-files/reco-x0-tb.xml'

The reco.py skript will populate the folder dqm-files with root files containing DQM histograms and trees. Because the inspection of root files is common knowledge
in HEP, i can stop here ;)

I am aware this step is not self explanatory. It is worthwile to have a look at the XML steering files to understand how gearfiles and calibration tags are specified.  They can be opened/edited with any text editor and contain many comments. 


Have fun with test beams ;)  


 


