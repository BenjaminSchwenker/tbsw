// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef EVENT_VERTEX_H
#define EVENT_VERTEX_H 1

#include <string>

#include "EVENT/LCObject.h"
#include "LCIOSTLTypes.h"
#include "empty_ignore.h"

namespace EVENT {

class ReconstructedParticle;


class Vertex ;
/**Vector of (pointers to) Vertices.*/
typedef std::vector<Vertex*> VertexVec ;
/** The Vertex class for LCIO. 
 *  <p>UNDER DEVELOPMENT!</p>
 *  see: <a href="http://forum.linearcollider.org/index.php?t=tree&goto=473">here</a><br>
 *
 *  <p>UNDER DEVELOPMENT!</p>
 *  
 * @author gaede, engels
 * @version $Id: Vertex.aid,v 1.3 2006/09/21 06:10:36 gaede Exp $
 */

class Vertex : public LCObject {

public: 
    /// Destructor.
    virtual ~Vertex() { /* nop */; }


    /** Useful typedef for template programming with LCIO */
    typedef Vertex lcobject_type ;
    /** Checks if the Vertex is the primary vertex of the event.
     *  Only one primary vertex per event is allowed
     */
    virtual bool isPrimary() const = 0;

    /** Type code for the algorithm that has been used to create the vertex - check/set the 
     *  collection parameters AlgorithmName and  AlgorithmType.
     */
    //public int getAlgorithmType() const ;
    virtual const std::string & getAlgorithmType() const = 0;

     /** Chi squared of the vertex fit.
     */
    virtual float getChi2() const = 0;

    /** Probability of the vertex fit.
     */
    virtual float getProbability() const = 0;

    /** Position of the vertex
     */
    virtual const float* getPosition() const = 0;

    /** Covariance matrix of the position (stored as lower triangle matrix, i.e. 
     *  cov(xx),cov(y,x),cov(y,y) ).
     */
    virtual const FloatVec & getCovMatrix() const = 0;

    /** Additional parameters related to this vertex - check/set the collection
     *  parameter "VertexParameterNames" for the parameters' meaning.
     */
    virtual const FloatVec & getParameters() const = 0;

    /** Returns Reconstructed Particle associated to the Vertex
     */
    virtual ReconstructedParticle * getAssociatedParticle() const = 0;
}; // class
} // namespace EVENT
#endif /* ifndef EVENT_VERTEX_H */
