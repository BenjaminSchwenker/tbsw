// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef EVENT_RAWCALORIMETERHIT_H
#define EVENT_RAWCALORIMETERHIT_H 1

#include "EVENT/LCObject.h"

#include <vector>

namespace EVENT {


class RawCalorimeterHit ;
/**Vector of (pointers to) RawCalorimeterHits.*/
typedef std::vector<RawCalorimeterHit*> RawCalorimeterHitVec ;
/** The generic calorimeter hit for real data (or simulation thereof). 
 *  In order to reduce the file size you can suppress a (32-bit) pointer 
 *  tag stored with every hit by setting the flag(LCIO::RCHBIT_NO_PTR)==1. <br>
 *  <b>NB: If you apply this flag to reduce the file size
 *  you won't be able to point/refer to the RawCalorimeterHits, e.g. from an
 *  LCRelation object.</b>
 * 
 * @author gaede
 * @version $Id: RawCalorimeterHit.aid,v 1.4 2006/08/03 16:53:35 gaede Exp $
 */

class RawCalorimeterHit : public LCObject {

public: 
    /// Destructor.
    virtual ~RawCalorimeterHit() { /* nop */; }


    /** Useful typedef for template programming with LCIO */
    typedef RawCalorimeterHit lcobject_type ;

    /** Returns the detector specific (geometrical) cell id.
     */
    virtual int getCellID0() const = 0;

    /** Returns the second detector specific (geometrical) cell id. Optional, check/set 
     *  flag(LCIO::RCHBIT_ID1)==1.
     */
    virtual int getCellID1() const = 0;

    /** Returns the amplitude of the hit in ADC counts.
     */
    virtual int getAmplitude() const = 0;

    /** Returns a time stamp for the hit. Optional, check/set 
     *  flag(LCIO::RCHBIT_TIME)==1.
     */
    virtual int getTimeStamp() const = 0;
}; // class
} // namespace EVENT
#endif /* ifndef EVENT_RAWCALORIMETERHIT_H */
