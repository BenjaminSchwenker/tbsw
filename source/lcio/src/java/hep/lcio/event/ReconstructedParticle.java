// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================

package hep.lcio.event;

import java.util.List;

/** The LCIO reconstructedParticle.
 * 
 * @author gaede
 * @version $Id: ReconstructedParticle.aid,v 1.18 2006/09/21 06:10:35 gaede Exp $
 */

public interface ReconstructedParticle extends LCObject {

//           
//     public static const int UNKNOWN  =  0 ; 
//     public static const int SINGLE   =  1 ; 
//     public static const int V0       =  2 ; 
//     public static const int COMPOUND =  3 ; 
//     public static const int JET      =  4 ; 
//       
    /** Type of reconstructed particle.
     *  Check/set collection parameters ReconstructedParticleTypeNames and 
     *  ReconstructedParticleTypeValues.
     */
    public int getType();

//     /** Return particles primary flag. All particles in the ReconstructedParticle
//      *  collection should by definition return true. Compound partciles will return false.
//      */
//     public boolean isPrimary() const ;
    /** Convenient method - same as (getParticles().size() > 0 ).
     */
    public boolean isCompound();

    /** The reconstructed particle's 3-momentum - only float used in files,
     */
    public double[] getMomentum();

    /** Energy of the  reconstructed particle - only float used in files.
     */
    public double getEnergy();

    /** Covariance matrix of the reconstructed particle's 4vector (10 parameters).
     *  Stored as lower triangle matrix of the four momentum (px,py,pz,E), i.e.
     *  cov(px,px), cov(py,px), cov( py,py ) , ....
     */
    public float[] getCovMatrix();

    /** Mass of the  reconstructed particle, set independently from four vector quantities 
     *  - only float used in files.
     */
    public double getMass();

    /** Charge of the reconstructed particle.
     */
    public float getCharge();

    /** Reference point of the reconstructedParticle parameters.
     */
    public float[] getReferencePoint();

    /** The particle Id's sorted by their likelihood.
     * @see ParticleID
     */
    public List getParticleIDs();

    /** The particle Id used for the kinematics of this particle.
     * @see ParticleID
     */
    public ParticleID getParticleIDUsed();

    /** The overall goodness of the PID on a scale of [0;1].
     */
    public float getGoodnessOfPID();

    /** The reconstructed particles that have been combined to this particle.
     */
    public List getParticles();

//     /** The weights of the reconstructed particles combined to this particle
//      */
//     public const FloatVec& getParticleWeights() const ; 
    /** The clusters that have been used for this particle.
     */
    public List getClusters();

//     /** The weights of cluster contributions to this particle
//      */
//     public const FloatVec& getClusterWeights() const ; 
    /** The tracks that have been used for this particle.
     */
    public List getTracks();

    /** The start vertex associated to this particle
     */
    public Vertex getStartVertex();

    /** The vertex where the particle decays
     *  This method actually returns the start vertex from the first daughter particle found
     */
    public Vertex getEndVertex();

    // set methods
//     /** Set the type of reconstructed particle, one of:<br>
//      *  ReconstructedParticle::SINGLE,<br>  
//      *  ReconstructedParticle::V0,<br>
//      *  ReconstructedParticle::COMPOUND,<br>
//      *  ReconstructedParticle::JET<br>
//      */
//     public void setType( int type)  ;
//     /**Set primary flag.
//      */
//     public void setPrimary( boolean primary ) ;
//     /** Set particle momentum (px,py,pz).
//      */
//     public void setMomentum( const float3V momentum ) ;
//     /**Set energy.
//      */
//     public void setEnergy( float energy) ;
//     /** Set the values of the covariance matrix of the particles four vector (px,py,pz,E).
//      */
//     public void setCovMatrix( const float3V cov ) ; 
//              
//     /**Set mass - independently from four vector. 
//      */
//     public void setMass( float mass ) ;
//     /** Set the charge. 
//      */
//     public void setCharge( float charge ) ;
//     /**Set the reference point, i.e. the point where the four vector is defined.
//      */
//     public void setReferencePoint( const float3V reference ) ;
    /**Add a ParticleID object.
     * @see ParticleID
     */
    public void addParticleID(ParticleID pid);

    /**Add a particle that has been used to create this particle.
     */
    public void addParticle(ReconstructedParticle particle);

    /**Add a cluster that has been used to create this particle.
     */
    public void addCluster(Cluster cluster);

    /**Add a track that has been used to create this particle.
     */
    public void addTrack(Track track);

//     /**Add a hypothesis for the MCParticle that this reconstructed particle corresponds to.
//      */
//     public void addMCParticle( MCParticle* mcParticle , float weight = 1.0 ) ;
} // class or interface

