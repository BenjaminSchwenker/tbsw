// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================

package hep.lcio.event;

import java.util.List;

/** The LCIO track class. The helix parameterization follows that of the L3 experiment at LEP.
 *  A detailed description of the track parameters is given in the LC-Note LC-DET-2006-004 
 *  "Track Parameters in LCIO" <a href="http://www-flc.desy.de/lcnotes/notes/LC-DET-2006-004.pdf">(pdf)</a>.
 * 
 * @author gaede
 * @version $Id: Track.aid,v 1.15 2007/09/18 09:47:09 gaede Exp $
 */

public interface Track extends LCObject {

    /** Flagword that defines the type of track. Bits 0-15 can be used to denote the subdetectors
     *  that have contributed hits used in the track fit.  For the definition of the bits 
     *  check/Set the collection variables TrackTypeBitNames and TrackTypeBitIndices.
     *  </br>Bits 16-31 are used internally.
     */
    public int getType();

    /** Impact paramter of the track
     *  in (r-phi).
     */
    public float getD0();

    /** Phi of the track at the reference point.
     * @see getReferencePoint
     */
    public float getPhi();

    /** Omega is the signed curvature of the track in [1/mm].
     * The sign is that of the particle's charge.
     */
    public float getOmega();

    /** Impact paramter of the track
     *  in (r-z).
     */
    public float getZ0();

    /** Lambda is the dip angle of the track in r-z at the reference point. 
     * @see getReferencePoint
     */
    public float getTanLambda();

    /** Covariance matrix of the track parameters. Stored as lower triangle matrix where
     * the order of parameters is:   d0, phi, omega, z0, tan(lambda).
     * So we have cov(d0,d0), cov( phi, d0 ), cov( phi, phi), ...
     */
    public float[] getCovMatrix();

    /** Reference point of the track parameters.
     *  The default for the reference point is the point of closest approach.
     *  @see isReferencPointPCA() 
     */
    public float[] getReferencePoint();

    /** True if the reference point is the point of closest approach.
     */
    public boolean isReferencePointPCA();

    /** Chi^2 of the track fit.
     */
    public float getChi2();

    /** Number of degrees of freedom  of the track fit.
     */
    public int getNdf();

    /** dEdx of the track.
     */
    public float getdEdx();

    /** Error of dEdx.
     */
    public float getdEdxError();

    /** The radius of the innermost hit that has been used in the track fit.
     *  Helps to detect V0 tracks with small impact paramters or heavy mesons.
     *  To be used as convenient information or if hits are not stored in 
     *  the data set, e.g. DST or FastMC. 
     */
    public float getRadiusOfInnermostHit();

    /** A vector that holds the number of hits in particular subdetectors.
     *  The mapping of indices to subdetectors is implementation dependent.
     *  To be used as convenient information or if hits are not stored in 
     *  the data set, e.g. DST or FastMC. 
     *  Check/set collection variable TrackSubdetectorNames for decoding the indices.
     */
    public int[] getSubdetectorHitNumbers();

    /** The tracks that have been combined to this track.
     */
    public List getTracks();

    /** Optionaly ( check/set flag(LCIO::TRBIT_HITS)==1)  return the hits that have been used 
     *  to create this track.
     */
    public List getTrackerHits();
} // class or interface

