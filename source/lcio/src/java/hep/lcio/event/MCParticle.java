// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================

package hep.lcio.event;

import java.util.List;

/** The LCIO Monte Carlo particle. 
 * 
 * @author gaede
 * @version $Id: MCParticle.aid,v 1.26 2006/08/03 16:53:34 gaede Exp $
 */
public interface MCParticle extends LCObject {

    /** Returns the energy of the particle (at the vertex) in [GeV] computed from
     * the particle's momentum and mass - only float used in files.
     */
    public double getEnergy();

    /** Returns the parents of this particle. 
     */
    public List getParents();

    /** Returns the daughters of this particle. 
     */
    public List getDaughters();

    /** Returns the number of parents of this particle - 0 if mother.
     * @deprecated use getParents()
     */
    public int getNumberOfParents();

    /** Returns the i-th parent of this particle.
     * @deprecated use getParents()
     *
     * @see MCParticle.getNumberOfParents()
     */
    public MCParticle getParent(int i);

    /** Returns the PDG code of the particle.
     */
    public int getPDG();

    /** Returns the status for particles as defined by  the generator, typically
     * <br> 0  empty line
     * <br> 1  undecayed particle, stable in the generator
     * <br> 2  particle decayed in the generator
     * <br> 3  documentation line
     */
    public int getGeneratorStatus();

    /** Returns the status for particles from the simulation, e.g.
     * decayed in flight. Bits 31-16 are used to decode the information.
     * Use  the followng boolean functions to determine the 
     * proper simulator status:<br>
     * @see isCreatedInSimulation() 
     * @see isBackscatter() 
     * @see vertexIsNotEndpointOfParent() 
     * @see isDecayedInTracker() 
     * @see isDecayedInCalorimeter() 
     * @see hasLeftDetector() 
     * @see isStopped() 
     */
    public int getSimulatorStatus();

    /** True if the particle has been created by the simulation program (rather than the generator).
     */
    public boolean isCreatedInSimulation();

    /** True if the particle was created by the simulator as a result of an interaction or decay in 
     * non-tracking region, e.g. a calorimeter. By convention, such particles are not saved. However, 
     * if this particle creates a tracker hit, the particle is added to the MCParticle list with 
     * this flag set, and the parent set to the particle that initially decayed or interacted in 
     * a non-tracking region.
     */
    public boolean isBackscatter();

    /** True if the particle was created as a result of a continuous process where the parent 
     *  particle continues, i.e. hard ionization, Bremsstrahlung, elastic interactions, etc. 
     */
    public boolean vertexIsNotEndpointOfParent();

    /** True if the particle decayed or interacted in a tracking region.
     */
    public boolean isDecayedInTracker();

    /** True if the particle decayed or interacted (non-continuous interaction, particle terminated) 
     * in non-tracking region.
     */
    public boolean isDecayedInCalorimeter();

    /** True if the particle left the world volume undecayed.
     */
    public boolean hasLeftDetector();

    /** True if the particle lost all kinetic energy inside the world volume and did not decay
     */
    public boolean isStopped();

    // corresponding setters
//     public void setCreatedInSimulation(boolean val)   ; 
//     public void setBackscatter(boolean val)   ; 
//     public void setVertexIsNotEndpointOfParent(boolean val)   ; 
//     public void setDecayedInTracker(boolean val)   ; 
//     public void setDecayedInCalorimeter(boolean val)   ; 
//     public void setHasLeftDetector(boolean val)   ; 
//     public void setStopped(boolean val)   ; 
    /** Returns the production vertex of the particle in [mm].
     */
    public double[] getVertex();

    /** The creation time of the particle in [ns] wrt. the event,
     *  e.g. for preassigned decays or decays in flight from 
     *  the simulator.
     */
    public float getTime();

    /** Returns the endpoint of the particle in [mm] if
     *  the  endpoint has been set explicetly.
     *  If not, the vertex of the first daughter that 
     *  has vertexIsNotEndpointOfParent==false is returned.
     *  If no such daughter exists (0,0,0) is returned.
     */
    public double[] getEndpoint();

    /** Returns the particle's 3-momentum at the production vertex in [GeV] 
     *  - only float used in files.
     */
    public double[] getMomentum();

    /** Returns the mass of the particle in [GeV] - only float used in files.
     */
    public double getMass();

    /** Returns the particle's charge.
     */
    public float getCharge();

    /** Returns the number of daughters of this particle.
     * @deprecated use getDaughters()
     */
    public int getNumberOfDaughters();

    /** Returns the i-th daughter of this particle.
     * @deprecated use getDaughters()
     */
    public MCParticle getDaughter(int i);

    // define the bit positions for the simulation flag
    public final static int BITEndpoint = 31;

    public final static int BITCreatedInSimulation = 30;

    public final static int BITBackscatter = 29;

    public final static int BITVertexIsNotEndpointOfParent = 28;

    public final static int BITDecayedInTracker = 27;

    public final static int BITDecayedInCalorimeter = 26;

    public final static int BITLeftDetector = 25;

    public final static int BITStopped = 24;
} // class or interface

