// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef IO_ILCFACTORY_H
#define IO_ILCFACTORY_H 1

namespace IO {

class LCReader;
class LCWriter;

/**Factory to create LCWriter and Reader object for the known data 
 * formats, e.g. SIO. The implementation (LCFactory) will be a singleton class 
 * that knows all concrete reader/writer implementations.
 * 
 * @author gaede
 * @version Mar 7, 2003
 */
class ILCFactory {

public: 
    /// Destructor.
    virtual ~ILCFactory() { /* nop */; }

//     /** Returns the instance of the factory.
//      * In the future we need to specify the data format here...
//      * This doesn't work for java as an interface can't have static members ...
//      */
    // this needs more thought ....
//           
// @cpp{ static LCFactory* getInstance() ;  
// }
//      
/**Creates an LCWriter object for the current persistency type.
 */
    virtual LCWriter * createLCWriter() = 0;

/**Creates an LCReader object for the current persistency type.
 */
    virtual LCReader * createLCReader(int readerFlag = 0) = 0;
}; // class
} // namespace IO
#endif /* ifndef IO_ILCFACTORY_H */
