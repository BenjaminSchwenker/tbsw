// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef EVENT_LCGENERICOBJECT_H
#define EVENT_LCGENERICOBJECT_H 1

#include <string>

#include "EVENT/LCObject.h"

namespace EVENT {

/** Simple interface to store generic user data.
 * To store your own classes they have to implement
 * this interface.
 *           
 * 2005-02-11, gaede: Changed the return value of getTypeName() and getDataDescription()
 * from const std::string& to const std::string to  make the implementation easier
 *       
 * @author gaede 
 * @version $Id: LCGenericObject.aid,v 1.7 2006/08/04 16:52:44 gaede Exp $
 */

class LCGenericObject : public LCObject {

public: 
    /// Destructor.
    virtual ~LCGenericObject() { /* nop */; }


    /** Useful typedef for template programming with LCIO */
    typedef LCGenericObject lcobject_type ;

    /** Number of integer values stored in this object.
     */
    virtual int getNInt() const = 0;

    /** Number of float values stored in this object.
     */
    virtual int getNFloat() const = 0;

    /** Number of double values stored in this object.
     */
    virtual int getNDouble() const = 0;

    /** Returns the integer value for the given index.
     */
    virtual int getIntVal(int index) const = 0;

    /** Returns the float value for the given index.
     */
    virtual float getFloatVal(int index) const = 0;

    /** Returns the double value for the given index.
     */
    virtual double getDoubleVal(int index) const = 0;

    /** True if objects of the implementation class have a fixed size, i.e
     * getNInt, getNFloat and getNDouble will return values that are constant during 
     * the lifetime of the object.
     */
    virtual bool isFixedSize() const = 0;

    /** The type name of the user class (typically the class name)
     * This type name is stored as a collection parameter "TypeName" 
     * with every collection of LCGenericObject subclasses.<br>
     * 
     */
    virtual const std::string getTypeName() const = 0;

    /** The description string. A comma separated list of pairs of
     *  type identifier, one of 'i','f','d' followed by ':' 
     *  and an attribute name, e.g. "i:cellId,f:offset,f:gain".
     */
    virtual const std::string getDataDescription() const = 0;


	/** Provide default implementation for id
	 */
	virtual int id() const {  return 0 ; }  
    }; // class
} // namespace EVENT
#endif /* ifndef EVENT_LCGENERICOBJECT_H */
