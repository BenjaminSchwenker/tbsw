// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef EVENT_PARTICLEID_H
#define EVENT_PARTICLEID_H 1

#include "EVENT/LCObject.h"
#include "LCIOSTLTypes.h"

namespace EVENT {


class ParticleID ;
/**Vector of (pointers to) ParticleIDs.*/
typedef std::vector<ParticleID*> ParticleIDVec ;
/** Persistent interface for LCIO ParticleIDs.
 *  Used by ReconstructedParticle and Cluster  
 *  for different hypotheses on the particle type.
 * 
 * @author gaede
 * @version $Id: ParticleID.aid,v 1.11 2008/05/30 13:23:27 gaede Exp $
 * @see ReconstructedParticle.getParticleIDs()
 * @see Cluster.getParticleIDs()
 */
class ParticleID : public LCObject {

public: 
    /// Destructor.
    virtual ~ParticleID() { /* nop */; }


    /** Useful typedef for template programming with LCIO */
    typedef ParticleID lcobject_type ;

    /** Type - userdefined.
     */
    virtual int getType() const = 0;

    /** The PDG code of this id - UnknownPDG ( 999999 ) if unknown.
     */
    virtual int getPDG() const = 0;

    /** Constant to be used if the PDG code is not known or undefined.
     */
          

    static const int UnknownPDG = 999999 ;
    /**The likelihood  of this hypothesis - in a user defined normalization.
     */
    virtual float getLikelihood() const = 0;

    /** Type of the algorithm/module that created this hypothesis - NOTE: must be unique within one 
     *  collection.  
     *  Check/set collection parameters PIDAlgorithmTypeName and PIDAlgorithmTypeID.
     */
    virtual int getAlgorithmType() const = 0;

    /** Parameters associated with this hypothesis.
     * Check/set collection parameters ParameterNames_PIDAlgorithmTypeName for decoding the indices.
     */
    virtual const FloatVec & getParameters() const = 0;
}; // class
} // namespace EVENT
#endif /* ifndef EVENT_PARTICLEID_H */
