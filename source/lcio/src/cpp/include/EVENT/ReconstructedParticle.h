// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef EVENT_RECONSTRUCTEDPARTICLE_H
#define EVENT_RECONSTRUCTEDPARTICLE_H 1

#include "EVENT/Cluster.h"
#include "EVENT/LCObject.h"
#include "EVENT/ParticleID.h"
#include "EVENT/ReconstructedParticle.h"
#include "EVENT/Track.h"
#include "LCIOSTLTypes.h"
#include "empty_ignore.h"

namespace EVENT {

class Cluster;
class ParticleID;
class Track;
class Vertex;


class ReconstructedParticle ;
/**Vector of (pointers to) ReconstructedParticles.*/
typedef std::vector<ReconstructedParticle*> ReconstructedParticleVec ;
/** The LCIO reconstructedParticle.
 * 
 * @author gaede
 * @version $Id: ReconstructedParticle.aid,v 1.18 2006/09/21 06:10:35 gaede Exp $
 */

class ReconstructedParticle : public LCObject {

public: 
    /// Destructor.
    virtual ~ReconstructedParticle() { /* nop */; }


    /** Useful typedef for template programming with LCIO */
    typedef ReconstructedParticle lcobject_type ;

//           
// @cpp{
//   public:
//     static const int UNKNOWN  =  0 ; 
//     static const int SINGLE   =  1 ; 
//     static const int V0       =  2 ; 
//     static const int COMPOUND =  3 ; 
//     static const int JET      =  4 ; 
// }
//      
    /** Type of reconstructed particle.
     *  Check/set collection parameters ReconstructedParticleTypeNames and 
     *  ReconstructedParticleTypeValues.
     */
    virtual int getType() const = 0;

//     /** Return particles primary flag. All particles in the ReconstructedParticle
//      *  collection should by definition return true. Compound partciles will return false.
//      */
//     public boolean isPrimary() const ;
    /** Convenient method - same as (getParticles().size() > 0 ).
     */
    virtual bool isCompound() const = 0;

    /** The reconstructed particle's 3-momentum - only float used in files,
     */
    virtual const double* getMomentum() const = 0;

    /** Energy of the  reconstructed particle - only float used in files.
     */
    virtual double getEnergy() const = 0;

    /** Covariance matrix of the reconstructed particle's 4vector (10 parameters).
     *  Stored as lower triangle matrix of the four momentum (px,py,pz,E), i.e.
     *  cov(px,px), cov(py,px), cov( py,py ) , ....
     */
    virtual const FloatVec & getCovMatrix() const = 0;

    /** Mass of the  reconstructed particle, set independently from four vector quantities 
     *  - only float used in files.
     */
    virtual double getMass() const = 0;

    /** Charge of the reconstructed particle.
     */
    virtual float getCharge() const = 0;

    /** Reference point of the reconstructedParticle parameters.
     */
    virtual const float* getReferencePoint() const = 0;

    /** The particle Id's sorted by their likelihood.
     * @see ParticleID
     */
    virtual const ParticleIDVec & getParticleIDs() const = 0;

    /** The particle Id used for the kinematics of this particle.
     * @see ParticleID
     */
    virtual ParticleID * getParticleIDUsed() const = 0;

    /** The overall goodness of the PID on a scale of [0;1].
     */
    virtual float getGoodnessOfPID() const = 0;

    /** The reconstructed particles that have been combined to this particle.
     */
    virtual const ReconstructedParticleVec & getParticles() const = 0;

//     /** The weights of the reconstructed particles combined to this particle
//      */
//     public const FloatVec& getParticleWeights() const ; 
    /** The clusters that have been used for this particle.
     */
    virtual const ClusterVec & getClusters() const = 0;

//     /** The weights of cluster contributions to this particle
//      */
//     public const FloatVec& getClusterWeights() const ; 
    /** The tracks that have been used for this particle.
     */
    virtual const TrackVec & getTracks() const = 0;

    /** The start vertex associated to this particle
     */
    virtual Vertex * getStartVertex() const = 0;

    /** The vertex where the particle decays
     *  This method actually returns the start vertex from the first daughter particle found
     */
    virtual Vertex * getEndVertex() const = 0;

    // set methods
//     /** Set the type of reconstructed particle, one of:<br>
//      *  ReconstructedParticle::SINGLE,<br>  
//      *  ReconstructedParticle::V0,<br>
//      *  ReconstructedParticle::COMPOUND,<br>
//      *  ReconstructedParticle::JET<br>
//      */
//     public void setType( int type)  ;
//     /**Set primary flag.
//      */
//     public void setPrimary( boolean primary ) ;
//     /** Set particle momentum (px,py,pz).
//      */
//     public void setMomentum( const float3V momentum ) ;
//     /**Set energy.
//      */
//     public void setEnergy( float energy) ;
//     /** Set the values of the covariance matrix of the particles four vector (px,py,pz,E).
//      */
//     public void setCovMatrix( const float3V cov ) ; 
//              
//    /** Set the values of the covariance matrix of the particles four vector (px,py,pz,E).
//      */
//     public void setCovMatrix( const FloatVec& cov ) ;
//       
//     /**Set mass - independently from four vector. 
//      */
//     public void setMass( float mass ) ;
//     /** Set the charge. 
//      */
//     public void setCharge( float charge ) ;
//     /**Set the reference point, i.e. the point where the four vector is defined.
//      */
//     public void setReferencePoint( const float3V reference ) ;
    /**Add a ParticleID object.
     * @see ParticleID
     */
    virtual void addParticleID(ParticleID * pid) = 0;

    /**Add a particle that has been used to create this particle.
     */
    virtual void addParticle(ReconstructedParticle * particle) = 0;

    /**Add a cluster that has been used to create this particle.
     */
    virtual void addCluster(Cluster * cluster) = 0;

    /**Add a track that has been used to create this particle.
     */
    virtual void addTrack(Track * track) = 0;

//     /**Add a hypothesis for the MCParticle that this reconstructed particle corresponds to.
//      */
//     public void addMCParticle( MCParticle* mcParticle , float weight = 1.0 ) ;
}; // class
} // namespace EVENT
#endif /* ifndef EVENT_RECONSTRUCTEDPARTICLE_H */
