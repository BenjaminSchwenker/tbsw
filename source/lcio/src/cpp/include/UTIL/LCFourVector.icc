#ifdef USE_CLHEP  // only if CLHEP is available !

#include "UTIL/LCFourVector.h"
#include "IMPL/MCParticleImpl.h"
#include "IMPL/ReconstructedParticleImpl.h"
#include "Exceptions.h"


using namespace EVENT;
using namespace IMPL;

namespace UTIL{
  

  typedef LCFourVector<MCParticle> MCParticle4V ;
  typedef LCFourVector<MCParticleImpl> MCParticleI4V ;
  
  typedef LCFourVector<ReconstructedParticle> ReconstructedParticle4V ;
  typedef LCFourVector<ReconstructedParticleImpl> ReconstructedParticleI4V ;


  // specializations for the different LCObjects that have 4 vector information

  template<>
  inline LCFourVector<MCParticle>::LCFourVector( const MCParticle* mcPart ) : 
    HepLorentzVector(mcPart->getMomentum()[0],
		     mcPart->getMomentum()[1],
		     mcPart->getMomentum()[2],
		     mcPart->getEnergy() )  
  {
  }
  template<>
  inline LCFourVector<MCParticle>::LCFourVector(LCObject* lcObj){
    
    _lcObj = dynamic_cast<MCParticle* >( lcObj ) ;

    if( _lcObj == 0 )
      throw Exception("Dynamic cast failed for LCFourVector() !") ;

    const double* p =  _lcObj->getMomentum() ;
    setPx( p[0] ) ;
    setPy( p[1] ) ;
    setPz( p[2] ) ;
    // use the mass to set the energy in order to avoid rounding problems
    setVectM( v() , _lcObj->getMass() ) ;
    //    setE( _lcObj->getEnergy() )  ;
  }

  template<>
  inline LCFourVector<ReconstructedParticle>::LCFourVector( const ReconstructedParticle* part ): 
    HepLorentzVector(part->getMomentum()[0],
		     part->getMomentum()[1],
		     part->getMomentum()[2],
		     part->getEnergy() )  
  {
  }
  template<>
  inline LCFourVector<ReconstructedParticle>::LCFourVector(LCObject* lcObj){
    
    _lcObj = dynamic_cast<ReconstructedParticle* >( lcObj ) ;

    if( _lcObj == 0 )
      throw Exception("Dynamic cast failed for LCFourVector() !") ;

    const double* p =  _lcObj->getMomentum() ;
    setPx( p[0] ) ;
    setPy( p[1] ) ;
    setPz( p[2] ) ;
    setE( _lcObj->getEnergy() )  ;
  }
  
} // end namespace
#endif  // USE_CLHEP
