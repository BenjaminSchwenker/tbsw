package hep.lcio.event ;

@ifdef cpp
@cpp{
#include <vector>
}
@endif
    @ifdef IGNORE // we have to split the cpp stuff - includes should go outside namespace 
    @endif
@ifdef cpp
@cpp{
class MCParticle ;
/**Vector of (pointers to) MCParticles.*/
typedef std::vector<MCParticle*> MCParticleVec ;
}
@endif

/** The LCIO Monte Carlo particle. 
 * 
 * @author gaede
 * @version $Id: MCParticle.aid,v 1.26 2006/08/03 16:53:34 gaede Exp $
 */
public interface MCParticle extends LCObject {
    

@ifdef cpp
@cpp{
    /** Useful typedef for template programming with LCIO */
    typedef MCParticle lcobject_type ;

}
@endif

    
    /** Returns the energy of the particle (at the vertex) in [GeV] computed from
     * the particle's momentum and mass - only float used in files.
     */
    public double getEnergy() const;

    /** Returns the parents of this particle. 
     */
    public const MCParticleVec& getParents() const ;
    
    /** Returns the daughters of this particle. 
     */
    public const MCParticleVec& getDaughters() const ;
    

    /** Returns the number of parents of this particle - 0 if mother.
     * @deprecated use getParents()
     */
    public int getNumberOfParents() const ;


    /** Returns the i-th parent of this particle.
     * @deprecated use getParents()
     *
     * @see MCParticle.getNumberOfParents()
     */
    public MCParticle* getParent( int i ) const ;



    /** Returns the PDG code of the particle.
     */
    public int getPDG() const;
    
    /** Returns the status for particles as defined by  the generator, typically
     * <br> 0  empty line
     * <br> 1  undecayed particle, stable in the generator
     * <br> 2  particle decayed in the generator
     * <br> 3  documentation line
     */
    public int getGeneratorStatus() const ;

    /** Returns the status for particles from the simulation, e.g.
     * decayed in flight. Bits 31-16 are used to decode the information.
     * Use  the followng boolean functions to determine the 
     * proper simulator status:<br>
     * @see isCreatedInSimulation() 
     * @see isBackscatter() 
     * @see vertexIsNotEndpointOfParent() 
     * @see isDecayedInTracker() 
     * @see isDecayedInCalorimeter() 
     * @see hasLeftDetector() 
     * @see isStopped() 
     */
    public int getSimulatorStatus() const ;

    // define the bit positions for the simulation flag
@ifdef cpp
@cpp{
    static const int BITEndpoint = 31 ;
    static const int BITCreatedInSimulation = 30 ;
    static const int BITBackscatter = 29 ;
    static const int BITVertexIsNotEndpointOfParent = 28 ;
    static const int BITDecayedInTracker = 27 ;
    static const int BITDecayedInCalorimeter = 26 ;
    static const int BITLeftDetector = 25 ;
    static const int BITStopped = 24 ;

}@else
    public static const int BITEndpoint = 31 ;
    public static const int BITCreatedInSimulation = 30 ;
    public static const int BITBackscatter = 29 ;
    public static const int BITVertexIsNotEndpointOfParent = 28 ;
    public static const int BITDecayedInTracker = 27 ;
    public static const int BITDecayedInCalorimeter = 26 ;
    public static const int BITLeftDetector = 25 ;
    public static const int BITStopped = 24 ;
@endif


    /** True if the particle has been created by the simulation program (rather than the generator).
     */
    public boolean isCreatedInSimulation() const ; 

    /** True if the particle was created by the simulator as a result of an interaction or decay in 
     * non-tracking region, e.g. a calorimeter. By convention, such particles are not saved. However, 
     * if this particle creates a tracker hit, the particle is added to the MCParticle list with 
     * this flag set, and the parent set to the particle that initially decayed or interacted in 
     * a non-tracking region.
     */
    public boolean isBackscatter() const ; 
    
    /** True if the particle was created as a result of a continuous process where the parent 
     *  particle continues, i.e. hard ionization, Bremsstrahlung, elastic interactions, etc. 
     */
    public boolean vertexIsNotEndpointOfParent() const ; 
    
    /** True if the particle decayed or interacted in a tracking region.
     */
    public boolean isDecayedInTracker() const ; 

    /** True if the particle decayed or interacted (non-continuous interaction, particle terminated) 
     * in non-tracking region.
     */
    public boolean isDecayedInCalorimeter() const ; 

    /** True if the particle left the world volume undecayed.
     */
    public boolean hasLeftDetector() const ; 

    /** True if the particle lost all kinetic energy inside the world volume and did not decay
     */
    public boolean isStopped() const ; 


    // corresponding setters
//     public void setCreatedInSimulation(boolean val)   ; 
//     public void setBackscatter(boolean val)   ; 
//     public void setVertexIsNotEndpointOfParent(boolean val)   ; 
//     public void setDecayedInTracker(boolean val)   ; 
//     public void setDecayedInCalorimeter(boolean val)   ; 
//     public void setHasLeftDetector(boolean val)   ; 
//     public void setStopped(boolean val)   ; 

    
    /** Returns the production vertex of the particle in [mm].
     */
    public const double3V getVertex() const;


    /** The creation time of the particle in [ns] wrt. the event,
     *  e.g. for preassigned decays or decays in flight from 
     *  the simulator.
     */
    public  float getTime() const ; 
    
    /** Returns the endpoint of the particle in [mm] if
     *  the  endpoint has been set explicetly.
     *  If not, the vertex of the first daughter that 
     *  has vertexIsNotEndpointOfParent==false is returned.
     *  If no such daughter exists (0,0,0) is returned.
     */
    public const double3V getEndpoint() const;


    /** Returns the particle's 3-momentum at the production vertex in [GeV] 
     *  - only float used in files.
     */
    public const double3V getMomentum() const;

    
    /** Returns the mass of the particle in [GeV] - only float used in files.
     */
    public double getMass() const;
    
    /** Returns the particle's charge.
     */
    public float getCharge() const;
    

    /** Returns the number of daughters of this particle.
     * @deprecated use getDaughters()
     */
    public int  getNumberOfDaughters() const ;
    
    /** Returns the i-th daughter of this particle.
     * @deprecated use getDaughters()
     */
    public MCParticle* getDaughter(int i) const ; 

}
