// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef GEAR_VXDPARAMETERS_H
#define GEAR_VXDPARAMETERS_H 1

#include "GEAR.h"
#include "gear/GearParameters.h"

namespace gear {

class VXDLayerLayout;

  /** Geometry properties of a vertex detector needed for reconstruction code. <br>
   *  <p>The vertex is assumed to consist of a number of layers. Each layer consists of
   *  a number of rectangular ladders that are uniformly distributed in a circle around the IP.<br>
   *  The sensitive volumes can be placed relative to the (insensitive) ladders.
   *  @see addLayer .</p>
   *  <p>The shell is described by outer and inner radius and it's half length in z.</p>
   *  <p>The gap is assumed to be symetrical around z==0 and goes through all layers and ladders.</p>
   *  
   *
   *  @author R. Lippe, DESY
   *  @version $Id: 
   */
	
class VXDParameters : virtual public GearParameters {

public: 
    /// Destructor.
    virtual ~VXDParameters() { /* nop */; }

  // static constants (enums( for the type of layout

    static const int CCD    = 1 ;
    static const int CMOS   = 2 ;
    static const int HYBRID = 3 ;
    /** The layer layout in the Vertex */
    virtual const VXDLayerLayout & getVXDLayerLayout() const = 0;

    /** The type of Vertex detector: VXDParameters.CCD, VXDParameters.CMOS or
     *  VXDParameters.HYBRID.
     */
    virtual int getVXDType() const = 0;

    /** The half length (z) of the support shell in mm (w/o gap).
     */
    virtual double getShellHalfLength() const = 0;

    /** The length of the gap in mm (gap position at z=0)
     */
    virtual double getShellGap() const = 0;

    /** The inner radius of the support shell in mm.
     */
    virtual double getShellInnerRadius() const = 0;

    /** The outer radius of the support shell in mm.
     */
    virtual double getShellOuterRadius() const = 0;

    /** The radiation length in the support shell
     */
    virtual double getShellRadLength() const = 0;

    /** returns whether a point is inside a ladder
     */
    virtual bool isPointInLadder(Vector3D p) const = 0;

    /** returns wheter a point is inside a sensitive volume
     */
    virtual bool isPointInSensitive(Vector3D p) const = 0;

    /** returns vector from point to nearest ladder
     */
    virtual Vector3D distanceToNearestLadder(Vector3D p) const = 0;

    /** returns vector from point to nearest sensitive volume
     */
    virtual Vector3D distanceToNearestSensitive(Vector3D p) const = 0;

    /** returns the first point where a given strainght line
     *  (parameters point p and direction v)  crosses a ladder
     *  (0,0,0) is returned if no intersection can be found.
     *  @param p  a point on the line. This will be the starting point.
     *  @param v  a vector along the line    
     */	
    virtual Vector3D intersectionLadder(Vector3D p, Vector3D v) const = 0;

    /** returns the first point where a given strainght line
     *  (parameters point p and direction v)  crosses a sensitive volume
     *  (0,0,0) is returned if no intersection can be found.
     *  @param p  a point on the line. This will be the starting point.
     *  @param v  a vector along the line
     */	
    virtual Vector3D intersectionSensitive(Vector3D p, Vector3D v) const = 0;
}; // class
} // namespace gear
#endif /* ifndef GEAR_VXDPARAMETERS_H */
