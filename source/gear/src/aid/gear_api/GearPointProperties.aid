package hep.gear.api ;

/** Abstract interface for a class that returns the (material) properties of a given point in
 *  in world coordinates. No assumption is made on the tool used to implement the functionality.
 * 
 *  Based on ideas discussed at the 2004 Argonne Simulation Workshop as summarized by T.Behnke.
 *
 * @author F. Gaede, DESY
 * @version $Id: GearPointProperties.aid,v 1.3 2007-03-07 15:37:45 gaede Exp $
 */
public interface GearPointProperties {
    
    //vec getPosition returns the current position (if ID is known)
    
    /** The cellID of the the sensitive detector at pos.
     */
    public long64 getCellID( const Vector3D& pos) const throws NotImplementedException ;
    
    // 	bool getMaterial  (true if defined material, false if problem)
    
    /** Name of material at pos.  
     */
    public const String& getMaterialName( const Vector3D& pos) const throws NotImplementedException ;
    
    /** Density in kg/m^3 at pos.  
     */
    public double getDensity( const Vector3D& pos) const throws NotImplementedException ;

//     /** Name of material at pos.  
//      */
//     public double getState( const Vector3D& pos) const throws NotImplementedException ;

    /** Temperature in K of material at pos.  
     */
    public double getTemperature( const Vector3D& pos) const throws NotImplementedException ;

    /** Pressure in P at pos.  
     */
    public double getPressure( const Vector3D& pos) const throws NotImplementedException ;
    
    /** Radiation length of material in mm at pos.  
     */
    public double getRadlen( const Vector3D& pos) const throws NotImplementedException ;
    
    /** Interaction length of material in mm at pos.  
     */
    public double getIntlen( const Vector3D& pos) const throws NotImplementedException ;
    
    /** Position in local coordinate 
     */
    Vector3D getLocalPosition( const Vector3D& pos) const throws NotImplementedException ;


    /** The magnetic field vector at pos in [Tesla].  
     */
    public Vector3D getB( const Vector3D& pos) const throws NotImplementedException ;
    
    /** The electric field vector at pos in [V/m].  
     */
    public Vector3D getE( const Vector3D& pos) const throws NotImplementedException ;
    

    /** Names of (geant4) logical volumes in heirarchy starting at given pos ending with the world volume. 
     */
    public String[] getListOfLogicalVolumes( const Vector3D& pos) const throws NotImplementedException ;


    /** Names of (geant4) physical volumes in heirarchy starting at given pos ending with the world volume. 
     */
    public String[] getListOfPhysicalVolumes( const Vector3D& pos) const throws NotImplementedException ;


    /** Names of (geant4) region that contains the given pos.
     */
    public String getRegion( const Vector3D& pos) const throws NotImplementedException ;
    

    /** True if region that contains pos is defined as a tracker.
     */
    public boolean isTracker( const Vector3D& pos) const throws NotImplementedException ;


    /** True if region that contains pos is defined as a calorimeter.
     */
    public boolean isCalorimeter( const Vector3D& pos) const throws NotImplementedException ;

}
