// -*- Java -*-
package hep.gear.api ;

/** Proposal for an abstract interface that defines geometry properties of
 * a typical sampling calorimeter as needed for reconstruction. <br>
 * 
 * @author F. Gaede, DESY
 * @version $Id: CalorimeterParameters.aid,v 1.1.1.1 2005-09-13 14:41:03 gaede Exp $
 */

public interface CalorimeterParameters extends GearParameters {
    
    // Static constants (enums) for the type of the layout
@ifdef cpp
@cpp{
    static const int BARREL = 1 ;
    static const int ENDCAP = 2 ;
}@else
    public static const int BARREL = 1 ;
    public static const int ENDCAP = 2 ;
@endif


    /** The layer layout in the calorimeter*/
    public const LayerLayout& getLayerLayout() const ;
    
    /** The type of the calorimeter layout: CalorimeterParameters.BARREL or
     *  CalorimeterParameters.ENDCAP.
     */
    public int getLayoutType()  const;
    
    /** Extent of the calorimeter in the r-z-plane  [ rmin, rmax, zmin, zmax ] in mm.
     */
    public const double[]& getExtent() const ;

    /** The order of the rotational symmetry <br>
     *   8 for an octagonal barrel calorimeter<br>
     *   2 for an endcap calorimeter<br>
     *   1 for a standalone prototype<br>
     *   0 for an idealized cylindrical calorimeter.
     */
    public int getSymmetryOrder() const ;

    /** The azimuthal angle of the first module if symmetryOrder > 0.
     */
    public double getPhi0() const ;
    
}
