package hep.gear.api ;

  /** Geometry properties of a vertex detector needed for reconstruction code. <br>
   *  <p>The vertex is assumed to consist of a number of layers. Each layer consists of
   *  a number of rectangular ladders that are uniformly distributed in a circle around the IP.<br>
   *  The sensitive volumes can be placed relative to the (insensitive) ladders.
   *  @see addLayer .</p>
   *  <p>The shell is described by outer and inner radius and it's half length in z.</p>
   *  <p>The gap is assumed to be symetrical around z==0 and goes through all layers and ladders.</p>
   *  
   *
   *  @author R. Lippe, DESY
   *  @version $Id: 
   */
	
public interface VXDParameters extends GearParameters {
    
  // static constants (enums( for the type of layout
    
@ifdef cpp
@cpp{
    static const int CCD    = 1 ;
    static const int CMOS   = 2 ;
    static const int HYBRID = 3 ;
}@else
    public static const int CCD    = 1 ;
    public static const int CMOS   = 2 ;
    public static const int HYBRID = 3 ;
@endif


    /** The layer layout in the Vertex */
    public const VXDLayerLayout& getVXDLayerLayout() const ;

    /** The type of Vertex detector: VXDParameters.CCD, VXDParameters.CMOS or
     *  VXDParameters.HYBRID.
     */
    public int getVXDType() const ;
    
    /** The half length (z) of the support shell in mm (w/o gap).
     */
    public double getShellHalfLength() const ;

    /** The length of the gap in mm (gap position at z=0)
     */
    public double getShellGap() const ;
    
    /** The inner radius of the support shell in mm.
     */
    public double getShellInnerRadius() const ;
    
    /** The outer radius of the support shell in mm.
     */
    public double getShellOuterRadius() const ;

    /** The radiation length in the support shell
     */
    public double getShellRadLength() const ;

    /** returns whether a point is inside a ladder
     */
    public boolean isPointInLadder(Vector3D p) const ;

    /** returns wheter a point is inside a sensitive volume
     */
    public boolean isPointInSensitive(Vector3D p) const ;

    /** returns vector from point to nearest ladder
     */
    public Vector3D distanceToNearestLadder(Vector3D p) const ;

    /** returns vector from point to nearest sensitive volume
     */
    public Vector3D distanceToNearestSensitive(Vector3D p) const ;
	
    /** returns the first point where a given strainght line
     *  (parameters point p and direction v)  crosses a ladder
     *  (0,0,0) is returned if no intersection can be found.
     *  @param p  a point on the line. This will be the starting point.
     *  @param v  a vector along the line    
     */	
    public Vector3D intersectionLadder( Vector3D p , Vector3D v ) const ;

    /** returns the first point where a given strainght line
     *  (parameters point p and direction v)  crosses a sensitive volume
     *  (0,0,0) is returned if no intersection can be found.
     *  @param p  a point on the line. This will be the starting point.
     *  @param v  a vector along the line
     */	
    public Vector3D intersectionSensitive( Vector3D p, Vector3D v ) const ;	
    
}
