Welcome to the world of test beam data analysis 


The test beam software framework (tbsw) deals with the reconstruction and analysis of test beam data obtained with the 
EUDET/AIDA reference telescope. Test beams are all about learning about a device under test, or DUT, installed in the 
centre of the reference telescope. The idea is to probe the device under test with charged tracks crossing the DUT at 
known times and precisely estimated kinematic parameters. 

The tbsw framework is designed to run local machines (Desktop / laptop) to enable detector groups doing their own data analysis right during the beam test (or shortly afterwards). Some effort was invested to make this as smooth and simple as possible. The installation of the framework is covered in INSTALL. The text below is a step by step instruction how to run the code on raw data.


For the impatient reader: 


After installation, the root directory of tbsw contains a 'workspace' folder. The first step to analyse data from a new beam test is to make
a copy of this folder. For example: 

> cp -r workspace ~/workspace-my-beam-test

The idea of the folder 'workspace-my-beam-test' is to collect all steering files and analysis results from a specific beam
test. Please replace the 'my-beam-test' part with something more specific like 'desy_october_2016' or similar. Note that the steering files and scripts in the workspace folder come with a specific version of tbsw and are not guaranteed to be backward compatible.  

Raw data files (.raw or converted .slcio) should not be stored directly in your new workspace folder. The reason is that raw data is of course not tied to a tbsw version. It is advised to create two folders outside of your  workspace and to collect all raw data there. For example: 

>mkdir path-to-big-disk/eudaq-raw/my-beam-test 

>mkdir path-to-big-disk/converted-lcio/my-beam-test 

Raw data from a typical one week beam test is typically <1TB and will fit on most Desktop PCs or laptops nowadays.  

Next, go to your new workspace folder and setup all environment variables. 

> . init_tbsw.sh

A test beam with the EUDET/AIDA telescope results in a number of .raw files stored at some location 'rawfiles'. The conversion 
of these .raw files into .slcio files can be handled using a converter script. For help, just type 

> ./converter.py -h 

The command  

>./converter.py -i 'path-to-big-disk/eudaq-raw/my-beam-test/*' -o path-to-big-disk/converted-lcio/my-beam-test

will convert all your .raw files into converted .slio files and copies them to the assigned output folder. The converter script uses the python multiprocessing module to use many processes as possible on your machine to speed up conversion. The script accepts wildcards and regular expressions for the input file name to specify exactly which .raw files shall be converted.  


Before we can analyse the .slcio files, a few configuration files need to be edited. The most important one is the 'gearfile',
an XML file used to define the geometry of the beam test telescope. Example gearfiles can be found in the folder gear-files. 
In case the geometry was changed during the beam time, more than one gearfile is needed.

Beside the gearfile, we need additional XML steering files for the Marlin processors doing the actual data processing. 
These steering files should be placed in the folder 'steering-files'. The folder contains steering files for the example of 
X0 imaging, namely the file 'reco-x0-tb.xml' for reconstruction and a group of files in the folder 'x0-tb' for 
calibration of the telescope. 

In case of x0 imaging, no new steering files are needed and we can proceed to running the analysis. The first part of the
analysis is to run the calibrate.py skript. This skript runs a hot-pixel killer, performs a pre alignment based on hit 
correlations and a track based alignment using the Kalman Alignment Algorithm. The command 

> .calibrate.py -i '~/path/to/converted/run12.slcio' -x 'steering-files/x0-tb' -c 'dummy'

creates a hot-pixel mask for all M26 sensors in the AIDA telescope and an alignment data base using data from run12. It uses 
steering files in the folder 'steering-files/x0-tb'. The calibration files will be written to the folder 'cal-files/dummy'
in the current workspace. The -c option defines a calibration tag other than the default tag 'dummy'. In case you have multiple
geometries (and multiple gearfiles), you will probably want to create calibration 
tags for each of them. 

The calibrate.py skript populates the folder 'tmp-runs/run12-dummy' with root files containing DQM histos to check the quality of the
calibration. It is worthwhile to have a look at these histograms to make sure the calibration was successful. In addition, text log files for 
all parts of the calibration are created.    

Once we have a calibration tag, we can run the actual reconstruction over one or more runs. For this the reco.py skript can be used.
For our x0 imaging example, the command is

> ./reco.py -i '~/path/to/converted/file*.slcio' -x 'steering-files/x0-tb/reco.xml'

The reco.py skript will populate the folder dqm-files with root files containing DQM histograms. The root files can be browsed directly using
roots TBrowser. In addition, some useful root macros can be found in the 'root-scripts' folder in the workspace. For X0 studies, have a look 
in the 'root-scripts/x0imaging' sub folder. 


Have fun with test beams ;)  

benjamin.schwenker@phys.uni-goettingen.de