Welcome to the world of test beam data analysis 


The test beam software framework (TBSW) deals with the reconstruction and analysis of test beam data obtained with the high resolution EUDET/AIDA telescope. The installation of the framework is covered in INSTALL. The material below explains the typical use case.  


1) Introduction: For the impatient reader 


The root directory of TBSW contains a 'workspace' folder. The first step to analyse data from a new beam test is to make a copy of this folder. For example: 

> cp -r workspace ~/workspace-my-beam-test

The idea of the folder 'workspace-my-beam-test' is to collect all steering files and analysis results from a specific beam test. Raw data files (.raw or 
.slcio) should ideally be stored in a different place. This practice helps to disentangle data from different beam times and helps to reproduce results 
at a later time ;) 


Next, go to your new workspace folder and setup all environment variables. 

> . init_tbsw.sh

A test beam with the EUDET/AIDA telescope results in a number of .raw files stored at some location 'rawfiles'. The conversion of these .raw files into .slcio 
files can be handled using a converter skript. For help on the syntax, just type 

> ./converter.py -h 

At the time of writting, the usage is

>./converter.py -i 'some/absolute/or/relative/path/file*' -o 'folder/to/put/files/'

The input .raw files can be specified using wildcards to convert many files in one go. The python script uses pythons multiprocessing module to speed up 
the conversion.  

Before we can analyse the .slcio files, a few configuration files need to be edited. The most important one is the 'gearfile', an XML file used to define the 
geometry of the beam test telescope. Some example gearfiles can be found in the folder gear-files. In case the geometry was changed during the beam time, more
than one gearfile is needed.

Beside the gearfile(s), we need additional XML steering files for the Marlin processors handling the actual data processing. These steering files should be placed 
in the folder 'steering-files'. The folder contains steering files for the exmaple of X0 imaging, namely the file 'reco-x0-tb.xml' and a group of files in the folder 
'cal-x0-tb'. 

In case of x0 imaging, no new steering files are needed and we can proceed to running the analysis. The first part of the analysis is to run the calibrate.py skript. 
This sript runs a hotpixel killer, performs a pre alignment based on hit correlations and a track based alignment using the Kalman Alignment Algorithm. At the time of writting, the usage is

> .calibrate.py -i '~/path/to/converted/file*.slcio' -x 'steering-files/cal-x0-tb' -c 'dummy'

The -c option defines a calibration tag. The default tag is 'dummy'. Calibration tags will be copied to the folder 'cal-files' inside the workspace. In case you have multiple geometries (and mulltiple gearfiles), you will probably want to create calibration tags for each of them. 

TROUBLE SHOOTING: The calibrate.py skript populates the folder 'tmp-runs' with root files containing DQM histos to check the quality of the calibration. It is worthwile 
to have a look at these histos to make sure the calibration was successful. In addition, ascii log files for all parts of the calibration are created.    

Once we have a calibration tag, we can run the actual reconstruction over one or more runs. For this the reco.py skript can be used. For our x0 imaging example, the usage is

> ./reco.py -i '~/path/to/converted/file*.slcio' -x 'steering-files/reco-x0-tb.xml'

The reco.py skript will populate the folder dqm-files with root files containing DQM histograms. The root files can be browsed directly using roots TBrowser. In addition, some useful root macros can be found in the 'root-scripts' folder in the workspace. For X0 studies, have a look in the 'root-scripts/x0imaging' sub folder. 

I am aware that editing steering files is not self explanatory. It is worthwile to have a look at the XML steering files to understand how gearfiles and calibration tags are specified.  They can be opened and edited with any text editor and contain comments/description for all steering parameters. 


Have fun with test beams ;)  

mail to author: benjamin.schwenker@phys.uni-goettingen.de
 


