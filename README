Welcome to the world of test beam data analysis 


The test beam software framework (tbsw) deals with the reconstruction and analysis of test beam data obtained with the 
EUDET/AIDA reference telescope. Test beams are all about learning about a device under test, or DUT, installed in the 
centre of the reference telescope. The idea is to probe the device under test with charged tracks crossing the DUT at 
known times and precisely estimated kinematic parameters. 

The tbsw framework is designed to run on local machines (Desktop / laptop) to enable detector groups doing their own data 
analysis right during the beam test (or shortly afterwards). Some effort was invested to make this as smooth and simple
as possible. The installation of the framework is covered in INSTALL. 


For the impatient reader: The text below is a step by step instruction how to run the code on raw data.


After installation, the root directory of tbsw contains a 'workspace' folder. The first step to analyse data from a new beam test
is to make a copy of this folder. For example: 

> cp -r workspace ~/workspace-my-beam-test

The idea of the folder 'workspace-my-beam-test' is to collect all steering files and analysis results from a specific beam test. 
Please replace the 'my-beam-test' part with something more specific like 'desy_october_2016' or similar. Note that the steering 
files and scripts in the workspace folder come with a specific version of tbsw and are not guaranteed to be backward compatible.  

Raw data files (.raw or converted .slcio) should not be stored directly in your new workspace folder. The reason is that raw data 
is of course not bound to a tbsw version. It is advised to create two folders outside of your workspace and to collect all raw data there.

For example: 

>mkdir path-to-big-disk/eudaq-raw/my-beam-test 

>mkdir path-to-big-disk/converted-lcio/my-beam-test 

Raw data from a one week beam test is typically <1TB and fits on most Desktop PCs or laptops.  

Next, go to your new workspace folder and setup all environment variables. 

> . init_tbsw.sh

A test beam with the EUDET/AIDA telescope results in a number of .raw files stored at 'eudaq-raw/my-beam-test'. The conversion 
of these .raw files into .slcio files can be handled using a converter script. For help, just type 

> ./converter.py -h 

The command  

>./converter.py -i 'path-to-big-disk/eudaq-raw/my-beam-test/*' -o path-to-big-disk/converted-lcio/my-beam-test

will convert all your .raw files into converted .slio files and copies them to the assigned output folder. The converter script 
uses the python multiprocessing module to use many processes as possible on your machine to speed up conversion. The script accepts
wildcards and regular expressions for the input file names to specify exactly which .raw files shall be converted.  

After converting the raw data, we need to create steering-files for the analysis. Typically, a test beam period breaks down to 
periods where one or more run is taken under unchanged conditions. The phrase unchanged conditions refers to conditions relevant
for data reconstruction and include: 

- for reference telescope: distances between detector planes, beam energy, trigger coincidence, m26 configuration files (->thresholds).

- for the DUT: you name it, it is your dut ;) You will probably want to put the name of the DUT and some important configurations. 

Your logbook should contain all the needed information to edit steering files. It is strongly advised to calibrate at least a few runs to 
make sure you really have all needed numbers in the logbook.  


The idea is to create a full set of steering files for each of these experiments. In case of radiation length measurements, there is already
a template folder with steering files: 

> cp -r workspace/steering-files/x0-tb   workspace/steering-files/x0-my-dut

The new steering-files folder has the content: 

1) gear.xml                           : xml file to describe the telescope geometry 
2) hotpixelkiller.xml                 : Marlin steering file, part of calibration 
3) correlator.xml                     : Marlin steering file, part of calibration 
4) kalmanalign-iteration-1.xml        : Marlin steering file, part of calibration 
5) align-config-iteration-1.cfg       : text file used to define alignment parameters 
6) kalmanalign-iteration-2.xml        : Marlin steering file, part of calibration 
7) align-config-iteration-2.cfg       : text file used to define alignment parameters 
8) telescope-dqm.xml                  : Marlin steering file, part of calibration 
9) reco.xml                           : Marlin steering file, contains all parameters for reconstruction 

All these files area readable by a text editor. But only few of them need to be modified. It typically boils down to editing the z 
positions of sensors in the gear.xml file, setting the particle momentum to the beam energy in Marlin steering files. Please read the 
comments in the files, it is pretty self explanatory.  

After editing the steering files, we can proceed to run the calibration script from the workspace:  

> ./calibrate.py -i 'path/converted-lcio/my-beam-test/runXY.slcio' -x 'steering-files/x0-my-dut' -c 'my-dut'

The -i option defines which run to use for calibration. The -x options defines the folder of steering files to be used. The option -c 
sets a calibration tag, a common name for all calibration data that are created. The calibrate.py script runs a hot-pixel killer to
mask noisy channels, performs a full alignment of the telescope and creates DQM plots. At the end, all calibration files will be 
written to the folder 'cal-files/my-dut'. Intermediate results and root files with DQM plots can be found in the folder 'tmp-runs/runXY-my-dut'. 

After the calibration is done, we can now run the full reconstruction on all runs taken under identical conditions (belonging to the same calibration 
tag). The ranges of run numbers taken under identical conditions and belonging to the same tag must(!) be written down in your logbook. 

For our example, we will just run over the run also used to create the tag:  

> ./reco.py -i 'path/converted-lcio/my-beam-test/runXY.slcio' -x 'steering-files/x0-my-dut/reco.xml' -c 'my-dut'

The reco.py script will populate the folder 'root-files' in your workspace. The root files can be browsed directly using ROOT TBrowser.  
Some useful root macros can be found in the 'root-scripts' folder in the workspace. For X0 studies, have a look in the 'root-scripts/x0imaging' 
sub folder. 


Have fun with test beams ;)  

benjamin.schwenker@phys.uni-goettingen.de